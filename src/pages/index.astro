---
import Timeline from '../components/Timeline.astro';

// Calculate date range from 1.5 years ago to current date
const endDate = new Date();
const startDate = new Date();
startDate.setFullYear(endDate.getFullYear() - 1, endDate.getMonth() - 6);

const startDateStr = startDate.toISOString().split('T')[0];
const endDateStr = endDate.toISOString().split('T')[0];

// Images will be loaded dynamically via the API
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href={`${import.meta.env.BASE_URL}favicon.svg`} />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		<title>Stargate Datacenter Timeline</title>
	</head>
	<body>
		<div class="app">
			<header>
				<h1>Stargate Datacenter Build Timeline</h1>
				<p>Satellite imagery from {startDateStr} to {endDateStr}</p>
			</header>
			
			<main>
				<div class="image-container">
					<div class="image-date" id="image-date">Loading...</div>
					<img id="current-image" src="" alt="Satellite image" />
					<div class="scale-overlay" id="scale-overlay">
						<div class="football-field">
							<div class="field-outline"></div>
							<div class="field-label">Football Field (120 yards)</div>
						</div>
					</div>
					<div class="loading" id="loading">Loading images...</div>
				</div>
				
				<Timeline images={[]} />
				
				
				<div class="info">
					<h3>About</h3>
					<p>Tracking the Stargate Datacenter construction through satellite imagery from February 2024 to August 2025.</p>
					<p>Location: 32.5022°N, 99.7892°W (Texas)</p>
					<p>Imagery sourced from Sentinel-2 via Copernicus Data Space.</p>
				</div>
			</main>
		</div>

		<style>
			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				background: black;
				color: white;
				font-family: 'Fira Code', monospace;
				min-height: 100vh;
			}

			.app {
				max-width: 1200px;
				margin: 0 auto;
				padding: 20px;
			}

			header {
				text-align: center;
				margin-bottom: 30px;
				border-bottom: 2px solid white;
				padding-bottom: 20px;
			}

			header h1 {
				font-size: 2.5em;
				margin-bottom: 10px;
			}

			header p {
				font-size: 1.2em;
				opacity: 0.8;
			}

			main {
				display: flex;
				flex-direction: column;
				gap: 20px;
			}

			.image-container {
				position: relative;
				width: 100%;
				height: 600px;
				border: 2px solid white;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				background: #111;
			}

			.image-date {
				position: absolute;
				top: 10px;
				left: 50%;
				transform: translateX(-50%);
				color: white;
				background: rgba(0, 0, 0, 0.8);
				padding: 8px 16px;
				border: 1px solid white;
				font-family: 'Fira Code', monospace;
				font-size: 1.1em;
				font-weight: bold;
				z-index: 10;
			}

			#current-image {
				max-width: 100%;
				max-height: 100%;
				object-fit: contain;
				display: none;
			}

			.loading {
				color: white;
				font-size: 1.5em;
				text-align: center;
			}

			.scale-overlay {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				pointer-events: none;
				z-index: 5;
				display: flex;
				align-items: flex-start;
				justify-content: flex-start;
			}

			.football-field {
				position: relative;
				margin-top: 20px;
				margin-left: 20px;
			}

			.field-outline {
				width: 17px;
				height: 12px;
				border: 1px solid #00ff00;
				background: rgba(0, 255, 0, 0.3);
				position: relative;
			}

			.field-outline::before {
				content: '';
				position: absolute;
				top: 50%;
				left: 0;
				right: 0;
				height: 1px;
				background: #00ff00;
				transform: translateY(-50%);
			}

			.field-outline::after {
				content: '';
				position: absolute;
				top: 0;
				bottom: 0;
				left: 50%;
				width: 1px;
				background: #00ff00;
				transform: translateX(-50%);
			}

			.field-label {
				color: #00ff00;
				font-family: 'Fira Code', monospace;
				font-size: 12px;
				margin-top: 5px;
				text-align: center;
				background: rgba(0, 0, 0, 0.7);
				padding: 2px 6px;
				border-radius: 3px;
			}


			.info {
				background: black;
				border: 2px solid white;
				padding: 15px;
				text-align: center;
			}

			.info h3 {
				margin: 0 0 10px 0;
				font-size: 1.2em;
				border-bottom: 1px solid white;
				padding-bottom: 5px;
			}

			.info p {
				margin: 5px 0;
				opacity: 0.9;
			}
		</style>

		<script define:vars={{ baseUrl: import.meta.env.BASE_URL }}>
			let currentImages = [];
			const BASE_URL = baseUrl;

			async function initializeApp() {
				try {
					// Stargate datacenter coordinates in Texas
					// Bounding box: [west, south, east, north]
					const bbox = [-99.8065975964918, 32.492551389316205, -99.7717279119445, 32.51217098523884];
					
					const endDate = new Date();
					const startDate = new Date();
					startDate.setFullYear(endDate.getFullYear() - 1, endDate.getMonth() - 6);
					
					const loading = document.getElementById('loading');
					loading.textContent = 'Fetching satellite images...';
					
					const response = await fetch(`${BASE_URL}/api/images`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							startDate: startDate.toISOString().split('T')[0],
							endDate: endDate.toISOString().split('T')[0],
							bbox: bbox
						})
					});
					const data = await response.json();
					
					if (data.error) {
						throw new Error(data.error);
					}
					
					// Sort images by date to ensure chronological order
					currentImages = data.images.sort((a, b) => new Date(a.date) - new Date(b.date));
					console.log('Loaded images:', currentImages);
					console.log('Image source:', data.source || 'unknown');
					
					if (currentImages.length > 0) {
						console.log('Showing first image:', currentImages[0]);
						updateTimeline();
						updateTimelineDisplay(0);
						
						// Start parallel preloading of all images for smooth video playback
						loading.textContent = `Preloading ${currentImages.length} images for smooth playback...`;
						await preloadAllImages();
						loading.style.display = 'none';
						
					} else {
						loading.textContent = 'No images found for the specified time range';
						loading.style.display = 'block';
					}
				} catch (error) {
					console.error('Failed to initialize app:', error);
					const loading = document.getElementById('loading');
					loading.textContent = 'Error loading images. Check console for details.';
				}
			}

			function showImage(index) {
				const img = document.getElementById('current-image');
				console.log('showImage called with index:', index, 'image:', currentImages[index]);
				if (currentImages[index]) {
					img.src = currentImages[index].imageUrl;
					img.style.display = 'block';
					console.log('Image src set to:', img.src);
				} else {
					console.log('No image at index:', index);
				}
			}

			function updateTimeline() {
				// Update the timeline component with real data
				const timelineSlider = document.getElementById('timeline-slider');
				const dateDisplay = document.getElementById('date-display');
				const playBtn = document.getElementById('play-btn');
				
				if (timelineSlider) {
					timelineSlider.max = currentImages.length - 1;
					timelineSlider.value = 0;
					
					// Remove any existing event listeners by cloning the element
					const newSlider = timelineSlider.cloneNode(true);
					timelineSlider.parentNode.replaceChild(newSlider, timelineSlider);
					
					// Add fresh event listener
					newSlider.addEventListener('input', (e) => {
						if (window.isPlaying) {
							stopPlayback();
						}
						updateTimelineDisplay(parseInt(e.target.value));
					});
				}
				
				if (dateDisplay && currentImages.length > 0) {
					dateDisplay.textContent = currentImages[0].date;
				}
				
				
				// Update play button event listener
				if (playBtn) {
					// Remove existing event listeners by cloning
					const newPlayBtn = playBtn.cloneNode(true);
					playBtn.parentNode.replaceChild(newPlayBtn, playBtn);
					
					// Add fresh event listener
					newPlayBtn.addEventListener('click', () => {
						if (window.isPlaying) {
							stopPlayback();
						} else {
							startPlayback();
						}
					});
				}
			}
			
			function startPlayback() {
				window.isPlaying = true;
				const playBtn = document.getElementById('play-btn');
				const timelineSlider = document.getElementById('timeline-slider');
				
				if (playBtn) {
					playBtn.textContent = '⏸️';
				}
				
				window.playInterval = setInterval(() => {
					if (!window.isPlaying) {
						return; // Safety check
					}
					
					const currentIndex = timelineSlider ? parseInt(timelineSlider.value) : 0;
					if (currentIndex < currentImages.length - 1) {
						updateTimelineDisplay(currentIndex + 1);
					} else {
						// Loop back to start
						updateTimelineDisplay(0);
					}
				}, 100); // Fast playback - 0.1 seconds
			}
			
			function stopPlayback() {
				window.isPlaying = false;
				const playBtn = document.getElementById('play-btn');
				
				if (playBtn) {
					playBtn.textContent = '▶️';
				}
				
				if (window.playInterval) {
					clearInterval(window.playInterval);
					window.playInterval = null;
				}
			}
			
			function updateTimelineDisplay(index) {
				if (index >= 0 && index < currentImages.length) {
					showImage(index);
					const timelineSlider = document.getElementById('timeline-slider');
					const dateDisplay = document.getElementById('date-display');
					const imageDate = document.getElementById('image-date');
					
					if (timelineSlider) {
						timelineSlider.value = index;
					}
					
					const currentDate = currentImages[index].date;
					if (dateDisplay) {
						dateDisplay.textContent = currentDate;
					}
					
					if (imageDate) {
						// Format the date nicely
						const date = new Date(currentDate);
						const formattedDate = date.toLocaleDateString('en-US', {
							year: 'numeric',
							month: 'long',
							day: 'numeric'
						});
						imageDate.textContent = formattedDate;
					}
					
				}
			}

			// Preload all images for smooth video playback
			async function preloadAllImages() {
				return new Promise((resolve) => {
					const loading = document.getElementById('loading');
					let loadedCount = 0;
					const totalImages = currentImages.length;
					
					if (totalImages === 0) {
						resolve();
						return;
					}
					
					// Create image elements and load in parallel
					const imagePromises = currentImages.map((imageData, index) => {
						return new Promise((imageResolve) => {
							const img = new Image();
							img.onload = () => {
								loadedCount++;
								loading.textContent = `Preloaded ${loadedCount}/${totalImages} images...`;
								imageResolve();
							};
							img.onerror = () => {
								console.warn(`Failed to preload image: ${imageData.imageUrl}`);
								loadedCount++;
								loading.textContent = `Preloaded ${loadedCount}/${totalImages} images...`;
								imageResolve();
							};
							img.src = imageData.imageUrl;
						});
					});
					
					// Wait for all images to load
					Promise.all(imagePromises).then(() => {
						console.log(`Successfully preloaded ${totalImages} images for smooth video playback`);
						resolve();
					});
				});
			}

			// Initialize global play state
			window.isPlaying = false;
			window.playInterval = null;



			// Initialize the app
			initializeApp();
			
		</script>
	</body>
</html>
